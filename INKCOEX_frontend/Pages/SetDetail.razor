@page "/sets/{id:int}"
@using INKCOEX_frontend.Model.Cards
@using INKCOEX_frontend.Services
@inject HttpClient Client
@inject AuthService AuthService

<h3 class="mb-3">Collection Status</h3>

<div class="d-flex justify-content-between align-items-center mb-3">
    @if (_isLoggedIn)
    {
        <div>
            <button class="btn btn-sm btn-outline-success me-2" @onclick="CheckAll">Check All</button>
            <button class="btn btn-sm btn-outline-secondary" @onclick="UncheckAll">Check None</button>
        </div>
    }
    else
    {
        <div class="text-muted small">You must be logged in to track your collection</div>
    }
</div>

@if (_cards == null)
{ 
    <p><em>Loading...</em></p>
}
else
{
    @foreach (var group in _cards.GroupBy(c => c.Rarity))
    {
        <div class="col-12 mt-3">
            <h5 class="text-primary fw-bold border-bottom pb-1">
                @FormatRarity(group.Key.ToString())
            </h5>
        </div>
        <div class="row row-cols-2 row-cols-sm-3 row-cols-md-4 row-cols-lg-6 g-3">

            @foreach (var card in group)
            {
                <div class="col">
                    <div class="card border-0 shadow-sm h-100 position-relative"
                         style="cursor:pointer; @(card.Owned || !_isLoggedIn ? "" : "filter:grayscale(100%) brightness(70%); opacity:0.6;")
                         @(!_isLoggedIn ? "pointer-events:none;" : "")"
                         @onclick="() => Toggle(card)">

                        <div class="card-body p-2 text-center small">
                            <div class="fw-bold">#@card.Number - @card.Name</div>
                        </div>

                        <img src="data:image/png;base64,@card.ImageData"
                             class="card-img-top"
                             alt="@card.Name"/>

                        @if (card.Owned)
                        {
                            <div class="check-overlay">
                                <i class="bi bi-check-circle-fill text-success fs-4"></i>
                            </div>
                        }
                    </div>
                </div>
            }
        </div>
    }
}

@code {
    [Parameter] 
    public int Id { get; set; }

    private List<Card>? _cards;
    private bool _isLoggedIn = false;
    private HashSet<int> _ownedCardIds = new();

    protected override async Task OnInitializedAsync()
    {
        _isLoggedIn = await AuthService.IsLoggedInAsync();

        _cards = await Client.GetFromJsonAsync<List<Card>>($"collections/sets/{Id}/cards");

        if (_isLoggedIn)
        {
            Client.DefaultRequestHeaders.Authorization = await AuthService.CreateAuthHeader();

            var owned = await Client.GetFromJsonAsync<List<int>>($"collections/sets/{Id}/user");
            _ownedCardIds = owned != null ? new HashSet<int>(owned) : new HashSet<int>();

            foreach (var card in _cards)
                card.Owned = _ownedCardIds.Contains(card.Id);
        }
    }

    private string FormatRarity(string rarity) => rarity switch
    {
        "DoubleRare" => "Double Rare",
        "IllustrationRare" => "Illustration Rare",
        "SpecialIllustrationRare" => "Special Illustration Rare",
        "HyperRare" => "Hyper Rare",
        _ => rarity
    };

    private async Task Toggle(Card card)
    {
        if (!_isLoggedIn)
            return; // ignore clicks when logged out

        await Client.PostAsync($"collections/cards/{card.Id}/toggle", null);

        card.Owned = !card.Owned;

        if (card.Owned)
            _ownedCardIds.Add(card.Id);
        else
            _ownedCardIds.Remove(card.Id);

        StateHasChanged();
    }

    private async Task CheckAll()
    {
        if (!_isLoggedIn) return;

        Client.DefaultRequestHeaders.Authorization = await AuthService.CreateAuthHeader();

        foreach (var card in _cards.Where(x => x.Owned == false))
        {
            await Toggle(card);
        }
        _cards?.ForEach(c => c.Owned = true);
        StateHasChanged();
    }

    private async Task UncheckAll()
    {
        if (!_isLoggedIn) return;

        Client.DefaultRequestHeaders.Authorization = await AuthService.CreateAuthHeader();

        foreach (var card in _cards.Where(x => x.Owned))
        {
            await Toggle(card);
        }

        await Client.DeleteAsync($"collections/sets/{Id}/collect-all");

        _cards?.ForEach(c => c.Owned = false);
        StateHasChanged();
    }
}
