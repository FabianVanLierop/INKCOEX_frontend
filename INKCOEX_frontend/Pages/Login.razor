@page "/login"
@using INKCOEX_frontend.Model.Auth
@using INKCOEX_frontend.Services
@using Microsoft.AspNetCore.Components.Authorization
@inject HttpClient Client
@inject NavigationManager Navigation
@inject AuthenticationStateProvider AuthStateProvider
@inject AuthService AuthService

<div class="d-flex justify-content-center align-items-center">
    <div class="card shadow p-4" style="width: 100%; max-width: 400px;">
        <h3 class="text-center">Login</h3>
        <form>
            <!-- Username input -->
            <div data-mdb-input-init class="form-outline mb-4">
                <label class="form-label" for="usernameForm">Username</label>
                <input id="usernameForm" @bind="_username" class="form-control" />
            </div>

            <!-- Password input -->
            <div data-mdb-input-init class="form-outline mb-4">
                <label class="form-label" for="passwordForm">Password</label>
                <input type="password" id="passwordForm" class="form-control" @bind="_password" />
            </div>

            <!-- Submit button -->
            <button type="button" data-mdb-button-init data-mdb-ripple-init class="btn btn-primary btn-block mb-4 w-100" @onclick="HandleLogin">
                Sign in
            </button>

            <!-- Register buttons -->
            <div class="text-center">
                <p>No account? <a href="register">Register</a></p>
            </div>
        </form>
    </div>
</div>

@code {
    private string? _username;
    private string? _password;
    private string? _errorMessage;

    private async Task HandleLogin()
    {
        _errorMessage = string.Empty;

        var response = await Client.PostAsJsonAsync("auth/login", new AuthRequest { Username = _username, Password = _password });

        if (response.IsSuccessStatusCode)
        {
            var result = await response.Content.ReadFromJsonAsync<AuthResponse>();
            await AuthService.LoginAsync(result?.Token!);
            ((CustomAuthStateProvider)AuthStateProvider).NotifyAuthenticationChanged();
            Navigation.NavigateTo("/");
        }
        else
        {
            _errorMessage = "Invalid login";
        }
    }
}

@code {

}
